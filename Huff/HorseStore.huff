#define function add(uint256, uint256) nonpayable returns(uint256)
#define function updateHorseNumber(uint256)nonpayable returns()
#define function readNumberOfHorses(uint256)view returns(uint256)

/// @notice simple dispatcher for the add function
#define macro MAIN() = takes(0) returns(1) {
    0x00 calldataload
    0xe0 shr
    dup1 __FUNC_SIG(add) eq addJump jumpi 

    dup1 __FUNC_SIG(updateHorseNumber) eq updateHorseNumberJump jumpi

    __FUNC_SIG(readNumberOfHorses) eq readHorseNumberJump jumpi

    0x0 0x0 revert

    addJump:
        ADD()

    updateHorseNumberJump:
        UPDATE_HORSE_NUMBER()
    
    readHorseNumberJump:
        READ_HORSE_NUMBER()
}

#define constant NUMBER_OF_HORSES = FREE_STORAGE_POINTER()

/// calldata after selector: 0x00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000005
/// @notice simple addition while ignoring function dispatcher
#define macro ADD() = takes(1) returns(0) {
    0x4 calldataload // [2]
    0x24 calldataload // [5,2]
    add // [7]
    0x40 mload // [offset, 7]
    swap1 // [7, offset]
    0x40 mload // [offset, 7, offset]
    mstore // [offset]
    dup1 // [offset, offset]
    0x20 add // [offset+32, offset]
    0x40 mstore // [offset]
    0x20 return
}

#define macro UPDATE_HORSE_NUMBER() = takes(0) returns(0) {
    0x4 calldataload 
    [NUMBER_OF_HORSES] sstore
    stop
    }

#define macro READ_HORSE_NUMBER() = takes(0) returns(0) {
    [NUMBER_OF_HORSES] sload
    0x40 mload swap1 dup2 mstore 
    0x20 swap1 return
    }